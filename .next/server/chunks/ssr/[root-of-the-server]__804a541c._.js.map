{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":["file:///Users/meteor/Desktop/AleGo/ale-project/lib/supabase/server.ts"],"sourcesContent":["import { createServerClient } from \"@supabase/ssr\";\nimport { cookies } from \"next/headers\";\n\n/**\n * Especially important if using Fluid compute: Don't put this client in a\n * global variable. Always create a new client within each function when using\n * it.\n */\nexport async function createClient() {\n  const cookieStore = await cookies();\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_OR_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll();\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options),\n            );\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    },\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;;;AAOO,eAAe;IACpB,MAAM,cAAc,MAAM,IAAA,0IAAO;IAEjC,OAAO,IAAA,+LAAkB,sUAGvB;QACE,SAAS;YACP;gBACE,OAAO,YAAY,MAAM;YAC3B;YACA,QAAO,YAAY;gBACjB,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,YAAY,GAAG,CAAC,MAAM,OAAO;gBAEjC,EAAE,OAAM;gBACN,0DAA0D;gBAC1D,wDAAwD;gBACxD,iBAAiB;gBACnB;YACF;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Users/meteor/Desktop/AleGo/ale-project/app/api/getProducts/page.tsx"],"sourcesContent":["import {createClient} from '@/lib/supabase/server'\nimport { NextResponse } from 'next/server';\n\n\nexport default async function getProducts (){\n    const supabase = await createClient()\n    const {data  } = await supabase.from(\"products\").select();\n    return NextResponse.json(data);\n}\n\n// app/api/products/route.ts\n// import { createClient } from '@/lib/supabase/server';\n// import { NextResponse } from 'next/server';\n\n// export async function GET() {\n//   const supabase = await createClient();\n//   const { data, error } = await supabase.from('products').select('');\n//     console.log(3333,data)\n//   if (error) {\n//     return NextResponse.json({ error: error.message }, { status: 500 });\n//   }\n//   return NextResponse.json(data);\n// }"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGe,eAAe;IAC1B,MAAM,WAAW,MAAM,IAAA,yIAAY;IACnC,MAAM,EAAC,IAAI,EAAG,GAAG,MAAM,SAAS,IAAI,CAAC,YAAY,MAAM;IACvD,OAAO,8IAAY,CAAC,IAAI,CAAC;AAC7B,EAEA,4BAA4B;CAC5B,wDAAwD;CACxD,8CAA8C;CAE9C,gCAAgC;CAChC,2CAA2C;CAC3C,wEAAwE;CACxE,6BAA6B;CAC7B,iBAAiB;CACjB,2EAA2E;CAC3E,MAAM;CACN,oCAAoC;CACpC,IAAI","debugId":null}}]
}